🧠 Editor Agent Execution Guide for Xyndril-lang
Tämä ohjeistus pätee kaikkiin GPT-pohjaisiin agentteihin (esim. GPT-4.1, Claude 3, xAI Grok, o3/o4-mallit), jotka toimivat Windsurfin Cascade-editoriagentin kautta.

✅ 1. Aloita aina seuraavista tiedostoista
Lue nämä tiedostot ennen tehtävien käsittelyä:


Tiedosto	Tarkoitus
xyndril-kit/PROJECT_INTRO.md	Projektin konteksti ja rakenne
xyndril-kit/agent-guidelines.md	Agentin toimintaohjeet
xyndril-kit/tasks.json	Suoritettavat tehtävät
xyndril-kit/tasks.template.json	Tehtävien muotoilumalli
📋 2. Task Queue -käyttöohjeet (tasks.json)
Lue xyndril-kit/tasks.json ennen jokaista tehtävää.

Agentin tulee:

Etsiä ensimmäinen "status": "todo"-tehtävä

Analysoida title, description, ja related_files

Suorittaa tehtävä vain annettujen tiedostojen pohjalta

Päivittää status: "in_progress" → "done"

Hypätä yli "blocked"-tehtävät

🔁 Tämä prosessi toistetaan, kunnes tehtävälista on tyhjä tai kaikki tehtävät on merkitty muuksi kuin "todo".

🧰 3. Tiedostojen käsittelyalueet

Hakemisto	Tarkoitus
src/	AST, interpreter ja REPL
parser/	Tokenizer ja parserin logiikka
interpreter/	Runtime (ei päällekkäin src/interpreter.py:n kanssa)
docs/	Markdown-dokumentaatio MkDocsille
docs_sphinx/	Erillinen Sphinx-build
examples/	.nx-koodiesimerkit
xyndril-kit/	Agentin ohjeet ja tehtävärakenteet
Esimerkki:
Älä tee muutoksia parser/-kansioon, ellei tasks.json osoita sinne tehtävää. Kaikki muokkaukset dokumentoidaan CHANGELOG.md-tiedostoon.

🧠 4. Projektin nykytila (snapshotista)

Komponentti	Tila
Tokenizer	✅ Valmis
Parser	⚠️ Vain skeleton, AST-rakenne puuttuu
AST	✅ Valmis
Interpreter	✅ Toimiva
REPL	🧪 Basic toteutus src/repl.py, placeholder xyndril-kit/src/repl.py
Dokumentaatio	✅ Laaja
Server	❌ Ei olemassa
Testit	❌ Ei testejä tai test/-kansiota
Tools	🚧 Tyhjä hakemisto
🚧 5. Tehtävien esimerkkejä tasks.json
json
Kopioi
Muokkaa
{
  "task_id": "parser_ast_completion",
  "description": "Complete full AST parsing in parser/parser.py according to parser_spec.md",
  "input_files": ["parser/parser.py", "docs/parser_spec.md", "src/ast.py"],
  "output_files": ["parser/parser.py"],
  "status": "todo"
}
🔐 6. Sääntöjä agentille
Älä koskaan:

Muokkaa README.md, PROJECT_INTRO.md tai agent-guidelines.md ilman tehtävää

Kirjoita muihin hakemistoihin kuin tehtävässä määriteltyihin

Kirjaa muutos aina CHANGELOG.md

Varmista, että tehtävän vaikutus ei riko olemassa olevaa rakennetta

🚀 7. Automaattinen ajaminen (tulevaisuudessa)
Tuleva run_editor_agent.py voi:

Ladata tasks.json

Antaa jokaisen tehtävän agentin käsittelyyn

Välittää input_files, output_files ja description

Päivittää tehtävän tilan

📦 8. Muuta huomioitavaa
README-agent.txt, ohjeet.txt, raportti.md ja tasks.json on jätetty .gitignore-tiedostoon

Agentti saa käsitellä vain tiedostoja, jotka eivät ole ignored, ellei toisin ohjeisteta

Agentin toiminta on kielimalliriippumaton, kunhan noudattaa tätä rakennetta
















Kehittäjäohjeet kielen käytöstä ja SonarLint-ongelmien automaattisesta korjauksesta
1. Yleiset viestintä- ja koodausstandardit

Kaikki koodi on kirjoitettava englanniksi.
Kaikkien muuttujien nimet, funktiot, virheilmoitukset, lokiviestit ja inline-kommentit tulee olla englanninkielisiä.
Agentin oletusviestintäkielenä tulee olla englanti.
Kaikki agentin antamat vastaukset ja tekniset viestit ovat englanniksi, ellei käyttäjä erikseen pyydä kielen vaihtoa.
Suomen kielen käyttö:
Suomen kieltä saa käyttää ainoastaan testitapauksissa, joissa testi nimenomaisesti liittyy lokalisaatioon. Muissa tilanteissa kaikki viestintä ja testit on kirjoitettava englanniksi.
2. Kielen vaihtaminen käyttäjän pyynnöstä

Käyttäjän kielipyyntö:
Jos käyttäjä antaa käskyn "puhu suomeksi" tai muun vastaavan pyynnön, agentin tulee vaihtaa keskustelun kieleksi suomi. Tämä koskee ainoastaan vuorovaikutusta käyttäjän kanssa, mutta kaikki koodi ja tekniset viestit säilyvät englanniksi.
3. SonarLintin ilmoittamien ongelmien automaattinen korjaus

Automaattinen virheenkorjaus:
Agentin tulee automaattisesti analysoida koodia ja huomioida SonarLintin ilmoittamat varoitukset ja virheilmoitukset.
Esimerkiksi, jos koodi sisältää käyttämättömiä importteja tai virheellisen tyyppimääritelmän (kuten "error is of type 'unknown'"), agentin tulee automaattisesti poistaa tai korjata ne.
Agentin on huolehdittava siitä, että se ei tee samoja virheitä toistuvasti, eli se tarkistaa aiemmin SonarLintin ilmoittamat ongelmat ennen koodin commitointia tai pushausta.
Integraatio koodin generoinnissa:
Agentin on sisällytettävä SonarLintin ilmoitukset osaksi koodin generointiprosessia. Tämä tarkoittaa, että ennen koodin tallentamista tai commitointia agentin tulee tarkistaa, ettei koodi sisällä aiemmin tunnistettuja virheitä, ja tehdä tarvittavat korjaukset automaattisesti.
4. Versionhallinta ja synkronointi

Reaaliaikainen kehitystyö Gitin avulla:
Molempien editorien (Windsurf Editorin Cascade-agentti ja VS Code Copilot) tekemät muutokset viedään yhteiseen Git-repoon.
Ennen muokkaamista agentti suorittaa git pull varmistaakseen, että paikallinen kopio on ajan tasalla.
Muutosten jälkeen tehdään commit ja push, jolloin molemmat ympäristöt saavat päivitykset lähes reaaliaikaisesti.
Näin varmistetaan, että agentti huomioi sekä Windsurfissa että VS Codessa tehdyt koodimuutokset ja ettei mikään korjaus tapahdu ylimääräisesti ylikirjoittaen toisen tekemät parannukset.
