"""
Basic Interpreter for Xyndril-lang

Evaluates AST nodes (Literal, BinaryOperation) generated by the parser.
"""

from src.ast import Literal, BinaryOperation, Variable, Assignment

class Interpreter:
    """Interpreter for evaluating AST nodes with variable support"""
    def __init__(self):
        self.variables = {}  # Store variable values (e.g., {'x': 42.0})

    def evaluate(self, node):
        """
        Evaluate an AST node and return the result.
        Supports:
        - Arithmetic: NUMBER, ADD (+), SUB (-), MUL (*), DIV (/)
        - Variables and assignments
        """
        if isinstance(node, Literal):
            return node.value
        elif isinstance(node, BinaryOperation):
            left_val = self.evaluate(node.left)
            right_val = self.evaluate(node.right)
            if node.operator == "+":
                return left_val + right_val
            elif node.operator == "-":
                return left_val - right_val
            elif node.operator == "*":
                return left_val * right_val
            elif node.operator == "/":
                if right_val == 0:
                    raise ValueError("Division by zero")
                return left_val / right_val
        elif isinstance(node, Variable):
            if node.name not in self.variables:
                raise ValueError(f"Undefined variable: {node.name}")
            return self.variables[node.name]
        elif isinstance(node, Assignment):
            value = self.evaluate(node.value)
            self.variables[node.name] = value
            return value
        raise ValueError(f"Unsupported node type: {type(node)}")

if __name__ == "__main__":
    # Test the interpreter
    from parser.parser import parse_statement
    interpreter = Interpreter()
    node = parse_statement("x = (42 + 10) * 2")
    result = interpreter.evaluate(node)
    print("Evaluation result:", result)  # Should print 104.0
    node = parse_statement("x")
    result = interpreter.evaluate(node)
    print("Variable x:", result)  # Should print 104.0
